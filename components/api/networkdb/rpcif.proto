// compile: protoc components/api/networkdb/rpcif.proto  --go_out=plugins=grpc:.

syntax = "proto3";

// import "messages.proto";
import "google/protobuf/empty.proto";

package api;

service ConfigurationManagement {
  // Component initialization
  rpc Initialize (Configuration) returns (Result) {}
}

service ClusterManagement {
  // // Cluster related operations
  // rpc StateCluster () returns (State) {}
  rpc JoinCluster (JoinClusterReq) returns (Result) {}
  // rpc LeaveCluster () returns (Result) {}
  rpc PeersCluster (google.protobuf.Empty) returns (PeerList) {}
}

// Interface exported by the server.
service GroupManagement {
  // // Group operations
  rpc JoinGroup (GroupID) returns (Result) {}
  rpc LeaveGroup (GroupID) returns (Result) {}
  // rpc ListGroup () return (Result) {}
  rpc PeersGroup (GroupID) returns (PeerList) {}
  }

service EntryManagement {
  // Entry operations
  rpc CreateEntryRpc (EntryIn) returns (Result) {}
  rpc ReadEntryRpc (EntryIn) returns (EntryIn) {}
  rpc UpdateEntryRpc (EntryIn) returns (Result) {}
  rpc DeleteEntryRpc (EntryIn) returns (Result) {}

  // Table operations
  rpc ReadTable(TableID) returns (EntryList) {}
  rpc WatchTable (TableID) returns (stream TableEvent) {}
}

service DiagnoseManagement {
  rpc Ready (google.protobuf.Empty) returns (Result) {}
}

enum OperationResult {
  SUCCESS = 0;
  FAIL = 1;
}

message Result {
  OperationResult status = 1;
  string error = 2;
  bytes data = 3;
}

message Configuration {
  // nodeName is the cluster wide unique name for this node.
  string nodeName = 1;
  // bindAddr is the IP on which networkdb listens.
  string bindAddr = 2 ;
  // bindPort is the local node's port to which we bind to for cluster communication.
  int32 bindPort = 3;
  // keys to be added to the Keyring of the memberlist. Key at index
	// 0 is the primary key
  repeated bytes keys = 4;
}

message JoinClusterReq {
  repeated string members = 1;
}

message GroupID {
  string groupName = 1;
}

message TableID {
  GroupID group = 1;
  string tableName = 2;
}

message EntryIn {
  TableID table = 1;
  Entry entry = 2;
}

message Entry {
  string key = 1;
  bytes value = 2;
}

message EntryList {
  TableID table = 1;
  repeated Entry list = 2;
}

message PeerList {
  repeated Peer peers = 1;
}

message Peer {
  string name = 1;
  string ip = 2;
}

enum TableOperation {
  CREATE = 0;
  UPDATE = 1;
  DELETE = 2;
}

message TableEvent {
  TableOperation operation = 1;
  TableID table = 2;
  Entry entry = 3;
}
