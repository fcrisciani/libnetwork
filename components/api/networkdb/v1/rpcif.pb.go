// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcif.proto

package networkdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigurationManagement service

type ConfigurationManagementClient interface {
	// Component initialization
	Initialize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Result, error)
}

type configurationManagementClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationManagementClient(cc *grpc.ClientConn) ConfigurationManagementClient {
	return &configurationManagementClient{cc}
}

func (c *configurationManagementClient) Initialize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.ConfigurationManagement/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigurationManagement service

type ConfigurationManagementServer interface {
	// Component initialization
	Initialize(context.Context, *Configuration) (*Result, error)
}

func RegisterConfigurationManagementServer(s *grpc.Server, srv ConfigurationManagementServer) {
	s.RegisterService(&_ConfigurationManagement_serviceDesc, srv)
}

func _ConfigurationManagement_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationManagementServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.ConfigurationManagement/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationManagementServer).Initialize(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigurationManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkdb.ConfigurationManagement",
	HandlerType: (*ConfigurationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _ConfigurationManagement_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcif.proto",
}

// Client API for ClusterManagement service

type ClusterManagementClient interface {
	// Cluster related operations
	StateCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ClusterState, error)
	JoinCluster(ctx context.Context, in *PeerList, opts ...grpc.CallOption) (*Result, error)
	LeaveCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error)
	PeersCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PeerList, error)
}

type clusterManagementClient struct {
	cc *grpc.ClientConn
}

func NewClusterManagementClient(cc *grpc.ClientConn) ClusterManagementClient {
	return &clusterManagementClient{cc}
}

func (c *clusterManagementClient) StateCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ClusterState, error) {
	out := new(ClusterState)
	err := grpc.Invoke(ctx, "/networkdb.ClusterManagement/StateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) JoinCluster(ctx context.Context, in *PeerList, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.ClusterManagement/JoinCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) LeaveCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.ClusterManagement/LeaveCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) PeersCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/networkdb.ClusterManagement/PeersCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterManagement service

type ClusterManagementServer interface {
	// Cluster related operations
	StateCluster(context.Context, *google_protobuf.Empty) (*ClusterState, error)
	JoinCluster(context.Context, *PeerList) (*Result, error)
	LeaveCluster(context.Context, *google_protobuf.Empty) (*Result, error)
	PeersCluster(context.Context, *google_protobuf.Empty) (*PeerList, error)
}

func RegisterClusterManagementServer(s *grpc.Server, srv ClusterManagementServer) {
	s.RegisterService(&_ClusterManagement_serviceDesc, srv)
}

func _ClusterManagement_StateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).StateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.ClusterManagement/StateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).StateCluster(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.ClusterManagement/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).JoinCluster(ctx, req.(*PeerList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_LeaveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).LeaveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.ClusterManagement/LeaveCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).LeaveCluster(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_PeersCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).PeersCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.ClusterManagement/PeersCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).PeersCluster(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkdb.ClusterManagement",
	HandlerType: (*ClusterManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateCluster",
			Handler:    _ClusterManagement_StateCluster_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ClusterManagement_JoinCluster_Handler,
		},
		{
			MethodName: "LeaveCluster",
			Handler:    _ClusterManagement_LeaveCluster_Handler,
		},
		{
			MethodName: "PeersCluster",
			Handler:    _ClusterManagement_PeersCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcif.proto",
}

// Client API for GroupManagement service

type GroupManagementClient interface {
	// // Group operations
	JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error)
	LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error)
	PeersGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*PeerList, error)
}

type groupManagementClient struct {
	cc *grpc.ClientConn
}

func NewGroupManagementClient(cc *grpc.ClientConn) GroupManagementClient {
	return &groupManagementClient{cc}
}

func (c *groupManagementClient) JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.GroupManagement/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.GroupManagement/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) PeersGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/networkdb.GroupManagement/PeersGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupManagement service

type GroupManagementServer interface {
	// // Group operations
	JoinGroup(context.Context, *Group) (*Result, error)
	LeaveGroup(context.Context, *Group) (*Result, error)
	PeersGroup(context.Context, *Group) (*PeerList, error)
}

func RegisterGroupManagementServer(s *grpc.Server, srv GroupManagementServer) {
	s.RegisterService(&_GroupManagement_serviceDesc, srv)
}

func _GroupManagement_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.GroupManagement/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).JoinGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.GroupManagement/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).LeaveGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_PeersGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).PeersGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.GroupManagement/PeersGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).PeersGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkdb.GroupManagement",
	HandlerType: (*GroupManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGroup",
			Handler:    _GroupManagement_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupManagement_LeaveGroup_Handler,
		},
		{
			MethodName: "PeersGroup",
			Handler:    _GroupManagement_PeersGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcif.proto",
}

// Client API for EntryManagement service

type EntryManagementClient interface {
	// Entry operations
	CreateEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error)
	ReadEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*TableEntry, error)
	UpdateEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error)
	DeleteEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error)
	// Table operations
	ReadTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*EntryList, error)
	WatchTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (EntryManagement_WatchTableClient, error)
}

type entryManagementClient struct {
	cc *grpc.ClientConn
}

func NewEntryManagementClient(cc *grpc.ClientConn) EntryManagementClient {
	return &entryManagementClient{cc}
}

func (c *entryManagementClient) CreateEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.EntryManagement/CreateEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) ReadEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*TableEntry, error) {
	out := new(TableEntry)
	err := grpc.Invoke(ctx, "/networkdb.EntryManagement/ReadEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) UpdateEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.EntryManagement/UpdateEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) DeleteEntryRpc(ctx context.Context, in *TableEntry, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.EntryManagement/DeleteEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) ReadTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (*EntryList, error) {
	out := new(EntryList)
	err := grpc.Invoke(ctx, "/networkdb.EntryManagement/ReadTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) WatchTable(ctx context.Context, in *Table, opts ...grpc.CallOption) (EntryManagement_WatchTableClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EntryManagement_serviceDesc.Streams[0], c.cc, "/networkdb.EntryManagement/WatchTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &entryManagementWatchTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntryManagement_WatchTableClient interface {
	Recv() (*TableEvent, error)
	grpc.ClientStream
}

type entryManagementWatchTableClient struct {
	grpc.ClientStream
}

func (x *entryManagementWatchTableClient) Recv() (*TableEvent, error) {
	m := new(TableEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EntryManagement service

type EntryManagementServer interface {
	// Entry operations
	CreateEntryRpc(context.Context, *TableEntry) (*Result, error)
	ReadEntryRpc(context.Context, *TableEntry) (*TableEntry, error)
	UpdateEntryRpc(context.Context, *TableEntry) (*Result, error)
	DeleteEntryRpc(context.Context, *TableEntry) (*Result, error)
	// Table operations
	ReadTable(context.Context, *Table) (*EntryList, error)
	WatchTable(*Table, EntryManagement_WatchTableServer) error
}

func RegisterEntryManagementServer(s *grpc.Server, srv EntryManagementServer) {
	s.RegisterService(&_EntryManagement_serviceDesc, srv)
}

func _EntryManagement_CreateEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).CreateEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.EntryManagement/CreateEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).CreateEntryRpc(ctx, req.(*TableEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_ReadEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).ReadEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.EntryManagement/ReadEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).ReadEntryRpc(ctx, req.(*TableEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_UpdateEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).UpdateEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.EntryManagement/UpdateEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).UpdateEntryRpc(ctx, req.(*TableEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_DeleteEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).DeleteEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.EntryManagement/DeleteEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).DeleteEntryRpc(ctx, req.(*TableEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_ReadTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).ReadTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.EntryManagement/ReadTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).ReadTable(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_WatchTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Table)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntryManagementServer).WatchTable(m, &entryManagementWatchTableServer{stream})
}

type EntryManagement_WatchTableServer interface {
	Send(*TableEvent) error
	grpc.ServerStream
}

type entryManagementWatchTableServer struct {
	grpc.ServerStream
}

func (x *entryManagementWatchTableServer) Send(m *TableEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _EntryManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkdb.EntryManagement",
	HandlerType: (*EntryManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntryRpc",
			Handler:    _EntryManagement_CreateEntryRpc_Handler,
		},
		{
			MethodName: "ReadEntryRpc",
			Handler:    _EntryManagement_ReadEntryRpc_Handler,
		},
		{
			MethodName: "UpdateEntryRpc",
			Handler:    _EntryManagement_UpdateEntryRpc_Handler,
		},
		{
			MethodName: "DeleteEntryRpc",
			Handler:    _EntryManagement_DeleteEntryRpc_Handler,
		},
		{
			MethodName: "ReadTable",
			Handler:    _EntryManagement_ReadTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTable",
			Handler:       _EntryManagement_WatchTable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcif.proto",
}

// Client API for DiagnoseManagement service

type DiagnoseManagementClient interface {
	Ready(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error)
}

type diagnoseManagementClient struct {
	cc *grpc.ClientConn
}

func NewDiagnoseManagementClient(cc *grpc.ClientConn) DiagnoseManagementClient {
	return &diagnoseManagementClient{cc}
}

func (c *diagnoseManagementClient) Ready(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/networkdb.DiagnoseManagement/Ready", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiagnoseManagement service

type DiagnoseManagementServer interface {
	Ready(context.Context, *google_protobuf.Empty) (*Result, error)
}

func RegisterDiagnoseManagementServer(s *grpc.Server, srv DiagnoseManagementServer) {
	s.RegisterService(&_DiagnoseManagement_serviceDesc, srv)
}

func _DiagnoseManagement_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnoseManagementServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkdb.DiagnoseManagement/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnoseManagementServer).Ready(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnoseManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkdb.DiagnoseManagement",
	HandlerType: (*DiagnoseManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ready",
			Handler:    _DiagnoseManagement_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcif.proto",
}

func init() { proto.RegisterFile("rpcif.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x6d, 0x8b, 0xda, 0x40,
	0x10, 0xc7, 0xa3, 0xd0, 0x82, 0x63, 0xd0, 0xba, 0x7d, 0xb0, 0xa4, 0xef, 0xf2, 0x01, 0x62, 0x89,
	0x95, 0x52, 0xb4, 0x85, 0xa2, 0x52, 0x2a, 0x16, 0x8a, 0xf7, 0xf4, 0x7a, 0xa3, 0x63, 0x6e, 0xb9,
	0xb8, 0x1b, 0x76, 0x37, 0x1e, 0xde, 0x57, 0xb8, 0x4f, 0x73, 0x1f, 0xf0, 0xe0, 0xc8, 0xe6, 0x3c,
	0x56, 0x2e, 0x22, 0xfa, 0xd2, 0x99, 0xf9, 0xcd, 0xff, 0xb7, 0x63, 0xa0, 0x2e, 0xd3, 0x39, 0x5b,
	0x06, 0xa9, 0x14, 0x5a, 0x90, 0x1a, 0x47, 0x7d, 0x2b, 0xe4, 0xcd, 0x22, 0xf2, 0xbe, 0xc4, 0x42,
	0xc4, 0x09, 0x76, 0x4c, 0x23, 0xca, 0x96, 0x1d, 0x5c, 0xa5, 0x7a, 0x53, 0xcc, 0x79, 0x8d, 0x15,
	0x2a, 0x45, 0x63, 0x54, 0xc5, 0xef, 0xf0, 0x12, 0xda, 0x43, 0xc1, 0x97, 0x2c, 0xce, 0x24, 0xd5,
	0x4c, 0xf0, 0x7f, 0x94, 0xd3, 0x18, 0x57, 0xc8, 0x35, 0xe9, 0x03, 0xfc, 0xe5, 0x4c, 0x33, 0x9a,
	0xb0, 0x3b, 0x24, 0x9f, 0x83, 0x97, 0x84, 0x60, 0x87, 0xf0, 0x5a, 0x56, 0x67, 0x86, 0x2a, 0x4b,
	0xb4, 0xef, 0x84, 0xf7, 0x55, 0x68, 0x0d, 0x93, 0x4c, 0x69, 0x94, 0xd6, 0xca, 0xdf, 0xe0, 0x9e,
	0x69, 0xaa, 0xf1, 0xb9, 0x43, 0x3e, 0x05, 0x85, 0x6b, 0xb0, 0x75, 0x0d, 0xc6, 0xb9, 0xab, 0xd7,
	0xb6, 0xc3, 0x8a, 0x59, 0xc3, 0xf9, 0x0e, 0xf9, 0x0e, 0xf5, 0x89, 0x60, 0x7c, 0xbb, 0xe1, 0xbd,
	0x35, 0xf9, 0x1f, 0x51, 0x4e, 0x99, 0xd2, 0xa5, 0x46, 0xa4, 0x0f, 0xee, 0x14, 0xe9, 0xfa, 0x60,
	0x76, 0x29, 0xfc, 0x13, 0xdc, 0x7c, 0xbb, 0x3a, 0x04, 0x97, 0xe9, 0xf8, 0x4e, 0xf8, 0x50, 0x81,
	0xe6, 0x1f, 0x29, 0xb2, 0xd4, 0xba, 0x45, 0x08, 0xb5, 0xfc, 0x21, 0xa6, 0x4c, 0xde, 0x59, 0x9c,
	0xa9, 0x94, 0x6b, 0x74, 0x01, 0xcc, 0x1b, 0x8e, 0x82, 0x7a, 0x00, 0xc6, 0x7d, 0x1f, 0xb4, 0xc7,
	0xf9, 0xb1, 0x0a, 0xcd, 0x31, 0xd7, 0x72, 0x63, 0x39, 0x0f, 0xa0, 0x31, 0x94, 0x48, 0x35, 0x9a,
	0xc6, 0x2c, 0x9d, 0x93, 0x8f, 0x16, 0x7c, 0x4e, 0xa3, 0xa4, 0xe8, 0x94, 0x8b, 0xfc, 0x02, 0x77,
	0x86, 0x74, 0x71, 0x88, 0x2d, 0x2f, 0xfb, 0x4e, 0x9e, 0x7e, 0x91, 0x2e, 0x4e, 0x4d, 0x1f, 0x40,
	0x63, 0x84, 0x09, 0x9e, 0x48, 0xf7, 0xa0, 0x96, 0xbb, 0x9b, 0xb1, 0x9d, 0x1b, 0x9a, 0x8a, 0xf7,
	0xc1, 0xaa, 0x98, 0x2d, 0xc5, 0x11, 0xc9, 0x0f, 0x80, 0x2b, 0xaa, 0xe7, 0xd7, 0xfb, 0xb8, 0xd7,
	0x0a, 0x6b, 0xe4, 0xda, 0x77, 0xbe, 0x56, 0xc2, 0x09, 0x90, 0x11, 0xa3, 0x31, 0x17, 0x0a, 0xad,
	0x7f, 0xe0, 0x1b, 0xbc, 0xc9, 0x3d, 0x36, 0x47, 0x7d, 0xbe, 0xd1, 0x5b, 0x33, 0xd4, 0x7d, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x77, 0x3c, 0x7d, 0x73, 0x33, 0x04, 0x00, 0x00,
}
