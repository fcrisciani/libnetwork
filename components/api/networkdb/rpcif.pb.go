// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/api/networkdb/rpcif.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	components/api/networkdb/rpcif.proto

It has these top-level messages:
	Result
	Configuration
	JoinClusterReq
	GroupID
	TableID
	EntryIn
	Entry
	EntryList
	PeerList
	Peer
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperationResult int32

const (
	OperationResult_SUCCESS OperationResult = 0
	OperationResult_FAIL    OperationResult = 1
)

var OperationResult_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var OperationResult_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x OperationResult) String() string {
	return proto.EnumName(OperationResult_name, int32(x))
}
func (OperationResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Result struct {
	Status OperationResult `protobuf:"varint,1,opt,name=status,enum=api.OperationResult" json:"status,omitempty"`
	Error  string          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Data   []byte          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetStatus() OperationResult {
	if m != nil {
		return m.Status
	}
	return OperationResult_SUCCESS
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Result) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Configuration struct {
	// NodeName is the cluster wide unique name for this node.
	NodeName string `protobuf:"bytes,1,opt,name=NodeName" json:"NodeName,omitempty"`
	// BindAddr is the IP on which networkdb listens.
	BindAddr string `protobuf:"bytes,2,opt,name=BindAddr" json:"BindAddr,omitempty"`
	// BindPort is the local node's port to which we bind to for cluster communication.
	BindPort int32 `protobuf:"varint,3,opt,name=BindPort" json:"BindPort,omitempty"`
	// Keys to be added to the Keyring of the memberlist. Key at index
	// 0 is the primary key
	Keys [][]byte `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Configuration) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Configuration) GetBindAddr() string {
	if m != nil {
		return m.BindAddr
	}
	return ""
}

func (m *Configuration) GetBindPort() int32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *Configuration) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type JoinClusterReq struct {
	Members []string `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *JoinClusterReq) Reset()                    { *m = JoinClusterReq{} }
func (m *JoinClusterReq) String() string            { return proto.CompactTextString(m) }
func (*JoinClusterReq) ProtoMessage()               {}
func (*JoinClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinClusterReq) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupID struct {
	GroupName string `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
}

func (m *GroupID) Reset()                    { *m = GroupID{} }
func (m *GroupID) String() string            { return proto.CompactTextString(m) }
func (*GroupID) ProtoMessage()               {}
func (*GroupID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupID) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type TableID struct {
	Group     *GroupID `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	TableName string   `protobuf:"bytes,2,opt,name=tableName" json:"tableName,omitempty"`
}

func (m *TableID) Reset()                    { *m = TableID{} }
func (m *TableID) String() string            { return proto.CompactTextString(m) }
func (*TableID) ProtoMessage()               {}
func (*TableID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TableID) GetGroup() *GroupID {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *TableID) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type EntryIn struct {
	Table *TableID `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Entry *Entry   `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *EntryIn) Reset()                    { *m = EntryIn{} }
func (m *EntryIn) String() string            { return proto.CompactTextString(m) }
func (*EntryIn) ProtoMessage()               {}
func (*EntryIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EntryIn) GetTable() *TableID {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *EntryIn) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Entry struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Entry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type EntryList struct {
	Table *TableID `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	List  []*Entry `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *EntryList) Reset()                    { *m = EntryList{} }
func (m *EntryList) String() string            { return proto.CompactTextString(m) }
func (*EntryList) ProtoMessage()               {}
func (*EntryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EntryList) GetTable() *TableID {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *EntryList) GetList() []*Entry {
	if m != nil {
		return m.List
	}
	return nil
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip   string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*Result)(nil), "api.Result")
	proto.RegisterType((*Configuration)(nil), "api.Configuration")
	proto.RegisterType((*JoinClusterReq)(nil), "api.JoinClusterReq")
	proto.RegisterType((*GroupID)(nil), "api.GroupID")
	proto.RegisterType((*TableID)(nil), "api.TableID")
	proto.RegisterType((*EntryIn)(nil), "api.EntryIn")
	proto.RegisterType((*Entry)(nil), "api.Entry")
	proto.RegisterType((*EntryList)(nil), "api.EntryList")
	proto.RegisterType((*PeerList)(nil), "api.PeerList")
	proto.RegisterType((*Peer)(nil), "api.Peer")
	proto.RegisterEnum("api.OperationResult", OperationResult_name, OperationResult_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigurationManagement service

type ConfigurationManagementClient interface {
	// Component initialization
	Initialize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Result, error)
}

type configurationManagementClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationManagementClient(cc *grpc.ClientConn) ConfigurationManagementClient {
	return &configurationManagementClient{cc}
}

func (c *configurationManagementClient) Initialize(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.ConfigurationManagement/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigurationManagement service

type ConfigurationManagementServer interface {
	// Component initialization
	Initialize(context.Context, *Configuration) (*Result, error)
}

func RegisterConfigurationManagementServer(s *grpc.Server, srv ConfigurationManagementServer) {
	s.RegisterService(&_ConfigurationManagement_serviceDesc, srv)
}

func _ConfigurationManagement_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationManagementServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigurationManagement/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationManagementServer).Initialize(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigurationManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConfigurationManagement",
	HandlerType: (*ConfigurationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _ConfigurationManagement_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/api/networkdb/rpcif.proto",
}

// Client API for ClusterManagement service

type ClusterManagementClient interface {
	// // Cluster related operations
	// rpc StateCluster () returns (State) {}
	JoinCluster(ctx context.Context, in *JoinClusterReq, opts ...grpc.CallOption) (*Result, error)
	// rpc LeaveCluster () returns (Result) {}
	PeersCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PeerList, error)
}

type clusterManagementClient struct {
	cc *grpc.ClientConn
}

func NewClusterManagementClient(cc *grpc.ClientConn) ClusterManagementClient {
	return &clusterManagementClient{cc}
}

func (c *clusterManagementClient) JoinCluster(ctx context.Context, in *JoinClusterReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.ClusterManagement/JoinCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) PeersCluster(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/api.ClusterManagement/PeersCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterManagement service

type ClusterManagementServer interface {
	// // Cluster related operations
	// rpc StateCluster () returns (State) {}
	JoinCluster(context.Context, *JoinClusterReq) (*Result, error)
	// rpc LeaveCluster () returns (Result) {}
	PeersCluster(context.Context, *google_protobuf.Empty) (*PeerList, error)
}

func RegisterClusterManagementServer(s *grpc.Server, srv ClusterManagementServer) {
	s.RegisterService(&_ClusterManagement_serviceDesc, srv)
}

func _ClusterManagement_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterManagement/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).JoinCluster(ctx, req.(*JoinClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_PeersCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).PeersCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterManagement/PeersCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).PeersCluster(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ClusterManagement",
	HandlerType: (*ClusterManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCluster",
			Handler:    _ClusterManagement_JoinCluster_Handler,
		},
		{
			MethodName: "PeersCluster",
			Handler:    _ClusterManagement_PeersCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/api/networkdb/rpcif.proto",
}

// Client API for GroupManagement service

type GroupManagementClient interface {
	// // Group operations
	JoinGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Result, error)
	LeaveGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Result, error)
	// rpc ListGroup () return (Result) {}
	PeersGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*PeerList, error)
}

type groupManagementClient struct {
	cc *grpc.ClientConn
}

func NewGroupManagementClient(cc *grpc.ClientConn) GroupManagementClient {
	return &groupManagementClient{cc}
}

func (c *groupManagementClient) JoinGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.GroupManagement/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) LeaveGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.GroupManagement/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) PeersGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/api.GroupManagement/PeersGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupManagement service

type GroupManagementServer interface {
	// // Group operations
	JoinGroup(context.Context, *GroupID) (*Result, error)
	LeaveGroup(context.Context, *GroupID) (*Result, error)
	// rpc ListGroup () return (Result) {}
	PeersGroup(context.Context, *GroupID) (*PeerList, error)
}

func RegisterGroupManagementServer(s *grpc.Server, srv GroupManagementServer) {
	s.RegisterService(&_GroupManagement_serviceDesc, srv)
}

func _GroupManagement_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GroupManagement/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).JoinGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GroupManagement/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).LeaveGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_PeersGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).PeersGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GroupManagement/PeersGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).PeersGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GroupManagement",
	HandlerType: (*GroupManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGroup",
			Handler:    _GroupManagement_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupManagement_LeaveGroup_Handler,
		},
		{
			MethodName: "PeersGroup",
			Handler:    _GroupManagement_PeersGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/api/networkdb/rpcif.proto",
}

// Client API for EntryManagement service

type EntryManagementClient interface {
	// Entry operations
	CreateEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error)
	ReadEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*EntryIn, error)
	UpdateEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error)
	DeleteEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error)
	// Table operations
	ReadTable(ctx context.Context, in *TableID, opts ...grpc.CallOption) (*EntryList, error)
}

type entryManagementClient struct {
	cc *grpc.ClientConn
}

func NewEntryManagementClient(cc *grpc.ClientConn) EntryManagementClient {
	return &entryManagementClient{cc}
}

func (c *entryManagementClient) CreateEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.EntryManagement/CreateEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) ReadEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*EntryIn, error) {
	out := new(EntryIn)
	err := grpc.Invoke(ctx, "/api.EntryManagement/ReadEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) UpdateEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.EntryManagement/UpdateEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) DeleteEntryRpc(ctx context.Context, in *EntryIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.EntryManagement/DeleteEntryRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryManagementClient) ReadTable(ctx context.Context, in *TableID, opts ...grpc.CallOption) (*EntryList, error) {
	out := new(EntryList)
	err := grpc.Invoke(ctx, "/api.EntryManagement/ReadTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntryManagement service

type EntryManagementServer interface {
	// Entry operations
	CreateEntryRpc(context.Context, *EntryIn) (*Result, error)
	ReadEntryRpc(context.Context, *EntryIn) (*EntryIn, error)
	UpdateEntryRpc(context.Context, *EntryIn) (*Result, error)
	DeleteEntryRpc(context.Context, *EntryIn) (*Result, error)
	// Table operations
	ReadTable(context.Context, *TableID) (*EntryList, error)
}

func RegisterEntryManagementServer(s *grpc.Server, srv EntryManagementServer) {
	s.RegisterService(&_EntryManagement_serviceDesc, srv)
}

func _EntryManagement_CreateEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).CreateEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntryManagement/CreateEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).CreateEntryRpc(ctx, req.(*EntryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_ReadEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).ReadEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntryManagement/ReadEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).ReadEntryRpc(ctx, req.(*EntryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_UpdateEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).UpdateEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntryManagement/UpdateEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).UpdateEntryRpc(ctx, req.(*EntryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_DeleteEntryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).DeleteEntryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntryManagement/DeleteEntryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).DeleteEntryRpc(ctx, req.(*EntryIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryManagement_ReadTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryManagementServer).ReadTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntryManagement/ReadTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryManagementServer).ReadTable(ctx, req.(*TableID))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntryManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EntryManagement",
	HandlerType: (*EntryManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntryRpc",
			Handler:    _EntryManagement_CreateEntryRpc_Handler,
		},
		{
			MethodName: "ReadEntryRpc",
			Handler:    _EntryManagement_ReadEntryRpc_Handler,
		},
		{
			MethodName: "UpdateEntryRpc",
			Handler:    _EntryManagement_UpdateEntryRpc_Handler,
		},
		{
			MethodName: "DeleteEntryRpc",
			Handler:    _EntryManagement_DeleteEntryRpc_Handler,
		},
		{
			MethodName: "ReadTable",
			Handler:    _EntryManagement_ReadTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/api/networkdb/rpcif.proto",
}

// Client API for DiagnoseManagement service

type DiagnoseManagementClient interface {
	Ready(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error)
}

type diagnoseManagementClient struct {
	cc *grpc.ClientConn
}

func NewDiagnoseManagementClient(cc *grpc.ClientConn) DiagnoseManagementClient {
	return &diagnoseManagementClient{cc}
}

func (c *diagnoseManagementClient) Ready(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.DiagnoseManagement/Ready", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiagnoseManagement service

type DiagnoseManagementServer interface {
	Ready(context.Context, *google_protobuf.Empty) (*Result, error)
}

func RegisterDiagnoseManagementServer(s *grpc.Server, srv DiagnoseManagementServer) {
	s.RegisterService(&_DiagnoseManagement_serviceDesc, srv)
}

func _DiagnoseManagement_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnoseManagementServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DiagnoseManagement/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnoseManagementServer).Ready(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnoseManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DiagnoseManagement",
	HandlerType: (*DiagnoseManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ready",
			Handler:    _DiagnoseManagement_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/api/networkdb/rpcif.proto",
}

func init() { proto.RegisterFile("components/api/networkdb/rpcif.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6f, 0x13, 0x3b,
	0x10, 0xcd, 0x67, 0xd3, 0x9d, 0xa4, 0x69, 0xaf, 0x6f, 0x75, 0x6f, 0x94, 0x7b, 0x05, 0xd1, 0x0a,
	0x89, 0xd0, 0x8f, 0x44, 0x84, 0x07, 0x9e, 0x4b, 0x52, 0x50, 0x4a, 0x69, 0x2b, 0x97, 0xbe, 0xe3,
	0x74, 0xa7, 0x91, 0xd5, 0x8d, 0x6d, 0xbc, 0x4e, 0xab, 0xf0, 0xc2, 0x8f, 0xe0, 0xd7, 0xf2, 0x86,
	0x6c, 0x6f, 0x3e, 0x36, 0x50, 0x29, 0x6f, 0x9e, 0x99, 0xe3, 0x73, 0x66, 0xc6, 0xc7, 0xf0, 0xe2,
	0x56, 0x4e, 0x94, 0x14, 0x28, 0x4c, 0xd2, 0x65, 0x8a, 0x77, 0x05, 0x9a, 0x47, 0xa9, 0xef, 0xa3,
	0x51, 0x57, 0xab, 0x5b, 0x7e, 0xd7, 0x51, 0x5a, 0x1a, 0x49, 0x8a, 0x4c, 0xf1, 0xe6, 0x7f, 0x63,
	0x29, 0xc7, 0x31, 0x76, 0x5d, 0x6a, 0x34, 0xbd, 0xeb, 0xe2, 0x44, 0x99, 0x99, 0x47, 0x84, 0x5f,
	0x60, 0x8b, 0x62, 0x32, 0x8d, 0x0d, 0x39, 0x82, 0xad, 0xc4, 0x30, 0x33, 0x4d, 0x1a, 0xf9, 0x56,
	0xbe, 0x5d, 0xef, 0xed, 0x77, 0x98, 0xe2, 0x9d, 0x4b, 0x85, 0x9a, 0x19, 0x2e, 0x85, 0x47, 0xd1,
	0x14, 0x43, 0xf6, 0xa1, 0x8c, 0x5a, 0x4b, 0xdd, 0x28, 0xb4, 0xf2, 0xed, 0x80, 0xfa, 0x80, 0x10,
	0x28, 0x45, 0xcc, 0xb0, 0x46, 0xb1, 0x95, 0x6f, 0xd7, 0xa8, 0x3b, 0x87, 0x8f, 0xb0, 0xd3, 0x97,
	0xe2, 0x8e, 0x8f, 0xa7, 0x9e, 0x88, 0x34, 0x61, 0xfb, 0x42, 0x46, 0x78, 0xc1, 0x26, 0xe8, 0xa4,
	0x02, 0xba, 0x88, 0x6d, 0xed, 0x1d, 0x17, 0xd1, 0x49, 0x14, 0xcd, 0x99, 0x17, 0xf1, 0xbc, 0x76,
	0x25, 0xb5, 0x71, 0x02, 0x65, 0xba, 0x88, 0xad, 0xf0, 0x3d, 0xce, 0x92, 0x46, 0xa9, 0x55, 0xb4,
	0xc2, 0xf6, 0x1c, 0x1e, 0x40, 0xfd, 0x4c, 0x72, 0xd1, 0x8f, 0xa7, 0x89, 0x41, 0x4d, 0xf1, 0x2b,
	0x69, 0x40, 0x65, 0x82, 0x93, 0x11, 0x6a, 0x3b, 0x63, 0xb1, 0x1d, 0xd0, 0x79, 0x18, 0xbe, 0x84,
	0xca, 0x07, 0x2d, 0xa7, 0x6a, 0x38, 0x20, 0xff, 0x43, 0x30, 0xb6, 0xc7, 0x95, 0xfe, 0x96, 0x89,
	0xf0, 0x23, 0x54, 0x3e, 0xb3, 0x51, 0x8c, 0xc3, 0x01, 0x09, 0xa1, 0xec, 0xf2, 0x0e, 0x54, 0xed,
	0xd5, 0xdc, 0xbe, 0x52, 0x16, 0xea, 0x4b, 0x96, 0xcc, 0x58, 0xb8, 0x23, 0xf3, 0x03, 0x2d, 0x13,
	0xe1, 0x25, 0x54, 0x4e, 0x85, 0xd1, 0xb3, 0xa1, 0xb0, 0x64, 0x2e, 0x9f, 0x21, 0x4b, 0x95, 0xa8,
	0x2f, 0x91, 0x16, 0x94, 0xd1, 0xc2, 0x1d, 0x51, 0xb5, 0x07, 0x0e, 0xe3, 0x08, 0xa8, 0x2f, 0x84,
	0x5d, 0x28, 0xbb, 0x98, 0xec, 0x41, 0xf1, 0x1e, 0x67, 0x69, 0xfb, 0xf6, 0x68, 0x1f, 0xec, 0x81,
	0xc5, 0x53, 0xdf, 0x45, 0x8d, 0xfa, 0x20, 0xbc, 0x84, 0xc0, 0x5d, 0x38, 0xe7, 0x89, 0xd9, 0xa8,
	0x87, 0x67, 0x50, 0x8a, 0x79, 0x62, 0x1a, 0x85, 0x56, 0x71, 0xad, 0x05, 0x97, 0x0f, 0x0f, 0x61,
	0xfb, 0x0a, 0x51, 0x3b, 0xbe, 0xe7, 0x50, 0x56, 0x38, 0x5f, 0x76, 0xb5, 0x17, 0x38, 0xb0, 0xad,
	0x52, 0x9f, 0x0f, 0x0f, 0xa0, 0x64, 0x43, 0xfb, 0x7a, 0x62, 0xb9, 0x6d, 0x77, 0x26, 0x75, 0x28,
	0x70, 0x95, 0xae, 0xac, 0xc0, 0xd5, 0x41, 0x1b, 0x76, 0xd7, 0xbc, 0x48, 0xaa, 0x50, 0xb9, 0xbe,
	0xe9, 0xf7, 0x4f, 0xaf, 0xaf, 0xf7, 0x72, 0x64, 0x1b, 0x4a, 0xef, 0x4f, 0x86, 0xe7, 0x7b, 0xf9,
	0xde, 0x19, 0xfc, 0x9b, 0x31, 0xdc, 0x27, 0x26, 0xd8, 0x18, 0x27, 0x28, 0x0c, 0xe9, 0x02, 0x0c,
	0x05, 0x37, 0x9c, 0xc5, 0xfc, 0x1b, 0x12, 0xe2, 0x1a, 0xca, 0x60, 0x9b, 0x55, 0x97, 0xf3, 0x02,
	0x61, 0xae, 0xf7, 0x1d, 0xfe, 0x4a, 0xfd, 0xb3, 0xc2, 0xf2, 0x1a, 0xaa, 0x2b, 0xc6, 0x22, 0x7f,
	0xbb, 0x2b, 0x59, 0xab, 0xad, 0xf1, 0x90, 0xb7, 0x50, 0xb3, 0x93, 0x26, 0xf3, 0x3b, 0xff, 0x74,
	0xfc, 0xa7, 0xec, 0xcc, 0x3f, 0x65, 0xe7, 0xd4, 0x7e, 0xca, 0xe6, 0xce, 0x62, 0x47, 0x76, 0x83,
	0x61, 0xae, 0xf7, 0x23, 0x0f, 0xbb, 0xce, 0x53, 0x2b, 0xfa, 0x6d, 0x08, 0xac, 0x9a, 0x4b, 0x93,
	0x8c, 0xed, 0xd6, 0x65, 0x5f, 0x01, 0x9c, 0x23, 0x7b, 0xc0, 0x0d, 0xa0, 0x87, 0x00, 0xae, 0xc3,
	0x3f, 0x41, 0x7f, 0xeb, 0xea, 0x67, 0x1e, 0x76, 0xdd, 0xab, 0xaf, 0x74, 0x75, 0x0c, 0xf5, 0xbe,
	0x46, 0x66, 0xd0, 0xdb, 0x41, 0xdd, 0xa6, 0x24, 0xa9, 0xc3, 0xd7, 0xf5, 0x8e, 0xa0, 0x46, 0x91,
	0x45, 0x4f, 0x80, 0x33, 0x51, 0x98, 0xb3, 0xe4, 0x37, 0x2a, 0xda, 0x98, 0xfc, 0x18, 0xea, 0x03,
	0x8c, 0x71, 0x53, 0xf8, 0x21, 0x04, 0xb6, 0x17, 0x67, 0x75, 0x92, 0xb1, 0x7d, 0xb3, 0xbe, 0xbc,
	0x97, 0xce, 0x3e, 0x00, 0x32, 0xe0, 0x6c, 0x2c, 0x64, 0x82, 0x2b, 0xd3, 0x77, 0xa0, 0x6c, 0x29,
	0x66, 0x4f, 0xbe, 0x6c, 0x56, 0x72, 0xb4, 0xe5, 0xca, 0x6f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x46, 0x73, 0xe8, 0xf4, 0xc8, 0x05, 0x00, 0x00,
}
